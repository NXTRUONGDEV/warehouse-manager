import { Component, OnInit } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms'; // ‚¨ÖÔ∏è Th√™m d√≤ng n√†y
import html2pdf from 'html2pdf.js';
import JsBarcode from 'jsbarcode';

@Component({
  selector: 'app-hoadon',
  standalone: true,
  imports: [CommonModule,FormsModule],
  templateUrl: './hoadon.component.html',
  styleUrls: ['./hoadon.component.css']
})
export class HoadonComponent implements OnInit {
  hoaDonList: any[] = [];

  //B·ªô l·ªçc
  filteredHoaDonList: any[] = [];

    filter = {
    loai: '', // 'Phi·∫øu nh·∫≠p kho' | 'Phi·∫øu xu·∫•t kho' | ''
    ngayBatDau: '',
    ngayKetThuc: '',
    tongTienMin: null,
    tongTienMax: null,
    trangThai: '',
    keyword: ''
  };

  xemChiTiet: boolean = false;              // Tr·∫°ng th√°i xem chi ti·∫øt
  selectedHoaDon: any = null;              // H√≥a ƒë∆°n ƒëang ƒë∆∞·ª£c ch·ªçn

  // Bi·∫øn m·ªü popup c·∫≠p nh·∫≠t
  capNhatMo: boolean = false;
  capNhatXuatMo: boolean = false;      // popup phi·∫øu xu·∫•t
  phieuDangCapNhat: any = null;

  previewLogo: string | null = null;

  constructor(private http: HttpClient) {}

ngOnInit(): void {
  const userId = sessionStorage.getItem('id');
  if (userId) {
    this.http.get<any[]>(`http://localhost:3000/api/hoa-don/${userId}`).subscribe({
      next: (data) => {
        this.hoaDonList = data.map(hd => ({
          ...hd,
          daXuatHoaDon: !!hd.da_xuat_hoa_don
        }));
        this.locHoaDon(); // üëâ √Åp d·ª•ng b·ªô l·ªçc ban ƒë·∫ßu
      },
      error: (err) => {
        console.error(err);
        alert('‚ùå L·ªói khi l·∫•y danh s√°ch h√≥a ƒë∆°n');
      }
    });
  } else {
    alert('‚ùå B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p!');
  }
}


  // Khi ng∆∞·ªùi d√πng b·∫•m "Xem chi ti·∫øt"
  xemChiTietHoaDon(hd: any) {
    const formatDate = (val: any): string | null => {
      if (!val) return null;
      const date = new Date(val);
      if (isNaN(date.getTime())) return null;
      return date.toISOString().split('T')[0]; // yyyy-MM-dd
    };

    this.selectedHoaDon = hd;

    this.phieuDangCapNhat = {
      ...hd,
      created_date: formatDate(hd.created_date),
      meeting_date: formatDate(hd.meeting_date),
      delivery_date: formatDate(hd.delivery_date),
      products: (hd.products || []).map((sp: any) => ({
        ...sp,
        manufacture_date: formatDate(sp.manufacture_date),
        expiry_date: formatDate(sp.expiry_date),
      }))
    };

    // Render barcode sau khi DOM ƒë√£ c·∫≠p nh·∫≠t
    setTimeout(() => {
      hd.products?.forEach((sp: any) => {
        const svgElement = document.getElementById('barcode-' + sp.product_code);
        if (svgElement) {
          JsBarcode(svgElement, sp.product_code, {
            format: "CODE128",
            displayValue: false,
            height: 40,
            width: 1.5,
            margin: 0
          });
        }
      });
    }, 100); // ƒë·ª£i DOM v·∫Ω xong
  }

  // ƒê√≥ng modal chi ti·∫øt
  dongChiTiet() {
    this.selectedHoaDon = null;
    this.xemChiTiet = false;
  }

  // ‚úÖ L·∫•y class t∆∞∆°ng ·ª©ng v·ªõi tr·∫°ng th√°i thanh tr·∫°ng th√°i
  getStepClass(trangThai: string, step: string): string {
    const steps = [
      'ƒê√£ g·ª≠i phi·∫øu',
      'ƒê√£ duy·ªát',
      'ƒê√£ nh·∫≠p h√†ng v√†o kho'
    ];
    const currentStepIndex = steps.indexOf(trangThai);
    const thisStepIndex = steps.indexOf(step);
    return currentStepIndex >= thisStepIndex ? 'step active' : 'step';
  }

  
capNhatPhieuNhap(hd: any) {
  this.capNhatMo = true;
  this.capNhatXuatMo = false; // ‚ùó T·∫Øt popup phi·∫øu xu·∫•t n·∫øu ƒëang m·ªü

  const formatDate = (dateStr: string) => {
    if (!dateStr) return '';
    const d = new Date(dateStr);
    return d.toISOString().substring(0, 10);
  };

  this.phieuDangCapNhat = {
    ...hd,
    created_date: formatDate(hd.created_date),
    meeting_date: formatDate(hd.meeting_date),
    products: hd.products.map((p: any) => ({
      ...p,
      manufacture_date: formatDate(p.manufacture_date),
      expiry_date: formatDate(p.expiry_date),
      preview_image: null
    }))
  };

  this.phieuDangCapNhat.products.forEach((sp: any, i: number) => {
    const weight = parseFloat(sp.weight) || 0;
    const quantity = parseFloat(sp.quantity) || 0;

    if ((!sp.kg_per_unit || sp.kg_per_unit === 0) && weight > 0 && quantity > 0) {
      sp.kg_per_unit = +(weight / quantity).toFixed(2);
    }

    this.capNhatKhoiLuongVaDienTich(i);
  });
}



  dongPopupCapNhat() {
    this.capNhatMo = false;
    this.phieuDangCapNhat = null;
    this.capNhatXuatMo = false;
    
  }


  luuCapNhatPhieu() {
    const phieu = this.phieuDangCapNhat;

    if (!phieu.supplier_address || !phieu.meeting_date) {
      alert("‚ö†Ô∏è Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß ƒë·ªãa ch·ªâ v√† ng√†y h·∫πn.");
      return;
    }

    this.http.put(`http://localhost:3000/api/phieu-nhap/${phieu.id}`, {
      supplier_name: phieu.supplier_name,
      supplier_address: phieu.supplier_address,
      meeting_date: phieu.meeting_date,
      supplier_account_email: phieu.supplier_account_email,
      logo_url: phieu.logo_url,
      note: phieu.note,
      note_admin: phieu.note_admin,
      products: phieu.products.map((sp: any) => ({
      ...sp,
      image_url: sp.preview_image ? sp.preview_image : sp.image_url
    }))
    }).subscribe(() => {
      alert('‚úÖ Phi·∫øu ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!');
      this.capNhatMo = false;
      this.phieuDangCapNhat = null;
      this.ngOnInit(); // reload l·∫°i danh s√°ch
      this.selectedHoaDon = null;
      this.xemChiTiet = false;
    });
  }


  onLogoSelected(event: any) {
    const file: File = event.target.files[0];
    if (file) {
      const formData = new FormData();
      formData.append('image', file); // ph·∫£i kh·ªõp v·ªõi multer single('image')

      this.http.post<any>('http://localhost:3000/api/upload', formData).subscribe({
        next: (res) => {
          this.previewLogo = res.imageUrl; // ‚Üê D√πng ƒë·ªÉ hi·ªÉn th·ªã
          this.phieuDangCapNhat.logo_url = res.imageUrl; // ‚Üê G√°n URL ·∫£nh tr·∫£ v·ªÅ
        },
        error: (err) => {
          alert('‚ùå Upload logo th·∫•t b·∫°i');
          console.error(err);
        }
      });
    }
  }

  onProductImageSelected(event: any, product: any) {
    const file: File = event.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e: any) => {
        product.preview_image = e.target.result; // Cho xem tr∆∞·ªõc
        product.image_url = product.preview_image; // G√°n lu√¥n n·∫øu mu·ªën l∆∞u base64
      };
      reader.readAsDataURL(file);
    }
  }

  getTongTien(phieu: any): number {
    if (!phieu || !phieu.products) return 0;
    return phieu.products.reduce((tong: number, sp: any) =>
      tong + ((sp.quantity || 0) * (sp.unit_price || 0)), 0);
  }

  getStepClassXuatKho(trangThai: string, step: string): string {
    const steps = [
      'Ch·ªù x√°c nh·∫≠n',
      'X√°c nh·∫≠n ƒë∆°n h√†ng - ƒêang chu·∫©n b·ªã',
      'Chu·∫©n b·ªã xong - ch·ªù giao h√†ng',
      'Ho√†n t·∫•t giao h√†ng'
    ];
    const currentStep = steps.indexOf(trangThai);
    const thisStep = steps.indexOf(step);
    return currentStep >= thisStep ? 'step active' : 'step';
  }

  thanhToan(hd: any) {
  if (hd.trang_thai !== 'Chu·∫©n b·ªã xong - ch·ªù giao h√†ng') {
    alert('‚ö†Ô∏è Phi·∫øu ch∆∞a s·∫µn s√†ng ƒë·ªÉ thanh to√°n.');
    return;
  }

  // üëâ ·ªû ƒë√¢y b·∫°n c√≥ th·ªÉ g·ªçi API thanh to√°n, ho·∫∑c ƒëi·ªÅu h∆∞·ªõng sang trang thanh to√°n
  alert(`‚úÖ S·∫µn s√†ng thanh to√°n cho phi·∫øu: ${hd.receipt_code}`);
  
  // V√≠ d·ª•: this.router.navigate(['/thanh-toan', hd.id]);
}

// X·ª≠ l√Ω m·ªü popup c·∫≠p nh·∫≠t phi·∫øu xu·∫•t
capNhatPhieuXuat(phieu: any) {
  this.capNhatXuatMo = true;
  this.capNhatMo = false;

  const formatDate = (dateStr: string) => {
    if (!dateStr) return '';
    const d = new Date(dateStr);
    return d.toISOString().substring(0, 10); // yyyy-MM-dd
  };

  this.phieuDangCapNhat = {
    ...phieu,
    created_date: formatDate(phieu.created_date),
    delivery_date: formatDate(phieu.delivery_date), // ‚úÖ Quan tr·ªçng
    products: (phieu.products || []).map((sp: any) => ({
      ...sp,
      manufacture_date: formatDate(sp.manufacture_date),
      expiry_date: formatDate(sp.expiry_date),
    }))
  };
}


capNhatKhoiLuongVaDienTich(index: number) {
  const sp = this.phieuDangCapNhat.products[index];
  const kgPerUnit = parseFloat(sp.kg_per_unit) || 0;
  const quantity = parseInt(sp.quantity) || 0;

  sp.weight = +(kgPerUnit * quantity).toFixed(2);     // Tr·ªçng l∆∞·ª£ng = kh·ªëi l∆∞·ª£ng m·ªói SP * s·ªë l∆∞·ª£ng
  sp.area = +(sp.weight / 250).toFixed(2);             // Gi·∫£ ƒë·ªãnh: 1m¬≤ ch·ª©a 250kg (b·∫°n c√≥ th·ªÉ thay ƒë·ªïi)
}

xuatHoaDonNhap(hd: any) {
  const element = document.getElementById('hoa-don-xuat-pdf');
  if (!element) return;

  const images = element.getElementsByTagName('img');
  const promises: Promise<void>[] = [];

  for (let i = 0; i < images.length; i++) {
    const img = images[i];
    if (!img.complete) {
      promises.push(new Promise((resolve) => {
        img.onload = () => resolve();
        img.onerror = () => resolve();
      }));
    }
  }

  Promise.all(promises).then(() => {
    const opt = {
      margin: 0.2,
      filename: `${hd.receipt_code}.pdf`,
      image: { type: 'jpeg', quality: 0.98 },
      html2canvas: { scale: 1.2, useCORS: true },
      jsPDF: {
        unit: 'in',
        format: 'a3',
        orientation: 'landscape',
      },
    };

    html2pdf().set(opt).from(element).save().then(() => {
      // ‚úÖ Sau khi xu·∫•t xong th√¨ g·ªçi API c·∫≠p nh·∫≠t tr·∫°ng th√°i
      this.http.put(`http://localhost:3000/api/phieu-nhap/${hd.id}/xuat-hoa-don`, {})
        .subscribe(() => {
        hd.daXuatHoaDon = true;
      });
    });
  });
}

xuatHoaDonXuat(hd: any) {
  const element = document.getElementById('hoa-don-xuat-pdf');
  if (!element) return;

  const images = element.getElementsByTagName('img');
  const promises: Promise<void>[] = [];

  for (let i = 0; i < images.length; i++) {
    const img = images[i];
    if (!img.complete) {
      promises.push(new Promise((resolve) => {
        img.onload = () => resolve();
        img.onerror = () => resolve();
      }));
    }
  }

  Promise.all(promises).then(() => {
    const opt = {
      margin: 0.2,
      filename: `${hd.receipt_code}_xuat.pdf`,
      image: { type: 'jpeg', quality: 0.98 },
      html2canvas: { scale: 1.2, useCORS: true },
      jsPDF: {
        unit: 'in',
        format: 'a3',
        orientation: 'landscape',
      },
    };

    html2pdf().set(opt).from(element).save().then(() => {
      // ‚úÖ G·ªçi API c·∫≠p nh·∫≠t tr·∫°ng th√°i "ƒë√£ xu·∫•t h√≥a ƒë∆°n xu·∫•t"
      this.http.put(`http://localhost:3000/api/phieu-xuat/${hd.id}/xuat-hoa-don`, {})
        .subscribe(() => {
          hd.daXuatHoaDon = true;
        });
    });
  });
}

locHoaDon() {
  this.filteredHoaDonList = this.hoaDonList.filter(hd => {
    const ngayTao = new Date(hd.created_date || hd.created_at);
    const { loai, ngayBatDau, ngayKetThuc, tongTienMin, tongTienMax, trangThai, keyword } = this.filter;

    return (
      (!loai || hd.loai === loai) &&
      (!trangThai || hd.trang_thai === trangThai) &&
      (!ngayBatDau || new Date(ngayBatDau) <= ngayTao) &&
      (!ngayKetThuc || new Date(ngayKetThuc) >= ngayTao) &&
      (!tongTienMin || hd.total_amount >= tongTienMin) &&
      (!tongTienMax || hd.total_amount <= tongTienMax) &&
      (!keyword || hd.receipt_code?.toLowerCase().includes(keyword.toLowerCase()))
    );
  });
}


}

import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { HttpClientModule, HttpClient } from '@angular/common/http';
import { GuihangService } from '../../services/phieu-nhap.service'; // ƒê∆∞·ªùng d·∫´n ƒë√∫ng

@Component({
  selector: 'app-guihang',
  standalone: true,                            // ‚úÖ ƒê√¢y l√† ƒëi·ªÅu ki·ªán b·∫Øt bu·ªôc
  imports: [CommonModule, FormsModule, HttpClientModule],  // ‚úÖ Import c√°c module c·∫ßn
  templateUrl: './guihang.component.html',
  styleUrls: ['./guihang.component.css']
})
export class GuihangComponent {
    formData: any = {
    created_date: '',
    supplier_name: '',
    supplier_address: '',
    logo: null,
    products: []
  };

  generatedReceiptCode: string = ''; // ƒë·ªÉ hi·ªÉn th·ªã m√£ phi·∫øu sau khi g·ª≠i

  userId = sessionStorage.getItem('id');
  userEmail = sessionStorage.getItem('email');
  userInfo: any = {};
  today = new Date().toISOString().substring(0, 10);

  maSanPhamCanThem: string = '';

  constructor(private http: HttpClient, private guiHangService: GuihangService) {}

  ngOnInit() {
    const savedForm = this.guiHangService.getFormData();
    const savedProducts = this.guiHangService.getProducts();

    if (savedForm) {
      this.formData = { ...this.formData, ...savedForm };
    } else {
      this.formData.created_date = this.today;
    }

    if (savedProducts && savedProducts.length) {
      this.formData.products = savedProducts;
    } else {
      this.addProduct(); // n·∫øu ch∆∞a c√≥ th√¨ th√™m m·∫∑c ƒë·ªãnh
    }

    this.http.get<any>(`http://localhost:3000/api/user-info/${this.userId}`).subscribe({
      next: (res) => this.userInfo = res || {},
      error: () => alert('Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng.')
    });
  }


  addProduct() {
    this.formData.products.push({
      product_name: '',
      product_type: '',
      product_code: '',
      unit: '',
      weight: 0,
      area: 0, // ‚úÖ Th√™m di·ªán t√≠ch
      manufacture_date: '',
      expiry_date: '',
      quantity: 0,
      unit_price: 0,
      imageFile: null,
      preview: ''
    });
  }


  removeProduct(index: number) {
    this.formData.products.splice(index, 1);

    // ‚ùó N·∫øu kh√¥ng c√≤n s·∫£n ph·∫©m n√†o thu·ªôc lo·∫°i "c√≥ s·∫µn" (readonly: true)
    const stillHasReadonly = this.formData.products.some((p: any) => p.readonly);

    if (!stillHasReadonly) {
      // üëâ Xo√° to√†n b·ªô th√¥ng tin nh√† cung c·∫•p v√¨ kh√¥ng c√≤n s·∫£n ph·∫©m li√™n quan
      this.formData.supplier_name = '';
      this.formData.logoPreview = '';
      this.formData.supplier_address = '';
      this.formData.representative_name = '';
      this.formData.representative_email = '';
      this.formData.representative_phone = '';
      this.formData.logo = null;
    }

    this.autoSave();
  }

  onLogoChange(event: any): void {
    const file = event.target.files[0];
    if (file) {
      const reader = new FileReader();

      reader.onload = () => {
        this.formData.logoPreview = reader.result;
        this.formData.logo = file; // l∆∞u file ·∫£nh th·∫≠t ƒë·ªÉ g·ª≠i l√™n server
      };

      reader.readAsDataURL(file);
    }
  }


  onProductImageChange(event: any, index: number): void {
    const file = event.target.files[0];
    if (file) {
      const reader = new FileReader();

      reader.onload = () => {
        // L∆∞u ƒë∆∞·ªùng d·∫´n preview v√†o formData.products
        this.formData.products[index].preview = reader.result;
        this.formData.products[index].imageFile = file; // l∆∞u file ƒë·ªÉ upload v·ªÅ server n·∫øu c·∫ßn
      };

      reader.readAsDataURL(file);
    }
  }


  calculateTotal() {
    return this.formData.products.reduce((sum: number, p: any) => {
      return sum + (p.quantity * p.unit_price);
    }, 0);
  }

  submitForm() {
    // Check if each product has an image
    const sanPhamKhongCoAnh = this.formData.products.filter((p: any) => {
      return !(p.imageFile || p.preview || p.image_url);
    });

    if (sanPhamKhongCoAnh.length > 0) {
      const danhSach = sanPhamKhongCoAnh.map((_: any, idx: number) => `#${idx + 1}`).join(', ');
      alert(`‚ùå C√°c s·∫£n ph·∫©m sau ch∆∞a c√≥ ·∫£nh: ${danhSach}`);
      return;
    }

    // Validate user and supplier information
    if (!this.userInfo.full_name || !this.userInfo.phone || !this.userInfo.address) {
      alert('‚ùå B·∫°n c·∫ßn c·∫≠p nh·∫≠t ƒë·∫ßy ƒë·ªß th√¥ng tin c√° nh√¢n tr∆∞·ªõc khi g·ª≠i h√†ng.');
      return;
    }

    if (
      !this.formData.created_date ||
      !this.formData.supplier_name ||
      !this.formData.supplier_address ||
      !(this.formData.logo || this.formData.logoPreview)
    ) {
      alert("‚ùå Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin nh√† cung c·∫•p v√† logo.");
      return;
    }

    if (!this.formData.products || this.formData.products.length === 0) {
      alert("‚ùå Vui l√≤ng th√™m √≠t nh·∫•t 1 s·∫£n ph·∫©m.");
      return;
    }

    const today = new Date();
    for (let i = 0; i < this.formData.products.length; i++) {
      const p = this.formData.products[i];

      // Validate product details
      if (
        !p.product_name || !p.product_type || !p.unit || !p.weight ||
        !p.manufacture_date || !p.expiry_date || !p.quantity || !p.unit_price
      ) {
        alert(`‚ùå Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin cho s·∫£n ph·∫©m s·ªë ${i + 1}.`);
        return;
      }

      if (+p.weight <= 0 || +p.quantity <= 0 || +p.unit_price <= 0) {
        alert(`‚ùå C√°c gi√° tr·ªã s·ªë ph·∫£i l·ªõn h∆°n 0 (s·∫£n ph·∫©m s·ªë ${i + 1}).`);
        return;
      }

      const nsx = new Date(p.manufacture_date);
      const hsd = new Date(p.expiry_date);
      if (nsx >= hsd || hsd <= today) {
        alert(`‚ùå Ng√†y s·∫£n xu·∫•t ph·∫£i < h·∫°n s·ª≠ d·ª•ng v√† h·∫°n s·ª≠ d·ª•ng ph·∫£i sau hi·ªán t·∫°i (s·∫£n ph·∫©m s·ªë ${i + 1}).`);
        return;
      }

      if (!p.readonly) {
        const daysDiff = Math.floor((hsd.getTime() - today.getTime()) / (1000 * 60 * 60 * 24));
        if (daysDiff < 30) {
          alert(`‚ùå H·∫°n s·ª≠ d·ª•ng ph·∫£i c√≤n √≠t nh·∫•t 30 ng√†y (s·∫£n ph·∫©m s·ªë ${i + 1}).`);
          return;
        }
      }

      // Assign image_url if no new image but an old image exists
      if (!p.image_url && !p.imageFile && p.preview) {
        p.image_url = p.preview;
      }
    }

    // If no new logo, use the old logo
    if (!this.formData.logo && this.formData.logoPreview) {
      this.formData.logo = this.formData.logoPreview;
    }

    // Create FormData and send
    const form = new FormData();
    form.append('created_date', this.formData.created_date);
    form.append('supplier_name', this.formData.supplier_name);
    form.append('supplier_address', this.formData.supplier_address);
    form.append('meeting_date', this.formData.appointment_date);
    form.append('note', this.formData.note || '');
    form.append('email', this.userEmail || '');
    form.append('total_amount', this.calculateTotal().toString());
    form.append('representative_name', this.formData.representative_name || '');
    form.append('representative_email', this.formData.representative_email || '');
    form.append('representative_phone', this.formData.representative_phone || '');

    if (this.formData.logo instanceof File) {
      form.append('logo', this.formData.logo);
    } else if (typeof this.formData.logo === 'string') {
      form.append('logo_url', this.formData.logo);
    }

    this.formData.products.forEach((p: any, index: number) => {
      if (p.imageFile) {
        form.append(`product_image_${index}`, p.imageFile);
      }
      // Add other product data for each product, ensuring it matches backend expectation
      // If not doing a separate products array, ensure all product properties are sent
      // in the JSON.stringify('products') part.
    });

    // Sending the products array as a JSON string
    form.append('products', JSON.stringify(this.formData.products));

    this.http.post('http://localhost:3000/api/phieu-nhap', form).subscribe({
      next: (res: any) => {
        this.generatedReceiptCode = res.receipt_code;
        alert(`‚úÖ G·ª≠i phi·∫øu chuy·ªÉn h√†ng th√†nh c√¥ng!\nüìÑ M√£ phi·∫øu: ${res.receipt_code}`);
        this.guiHangService.clearFormData();
        this.guiHangService.clearProducts();
        window.location.reload();
      },
      error: (err) => {
        console.error(err);
        alert('‚ùå G·ª≠i phi·∫øu th·∫•t b·∫°i.');
      }
    });
  }

  // Khi ng∆∞·ªùi d√πng thay ƒë·ªïi s·ªë l∆∞·ª£ng ho·∫∑c kg/sp, c·∫≠p nh·∫≠t l·∫°i tr·ªçng l∆∞·ª£ng v√† di·ªán t√≠ch
  updateWeightAndArea(index: number): void {
    const item = this.formData.products[index];
    const quantity = Number(item.quantity) || 0;
    const kgPerUnit = Number(item.kg_per_unit) || 0;

    item.weight = +(quantity * kgPerUnit).toFixed(2);
    item.area = +(item.weight / 500 * 5).toFixed(2); // M·ªõi: 500kg = 5m¬≤
  }

  autoSave() {
    this.guiHangService.saveFormData(this.formData);
    this.guiHangService.setProducts(this.formData.products);
  }

  onFieldChange() {
    this.autoSave();
  }

  themSanPhamCoSan() {
    const code = this.maSanPhamCanThem.trim();
    if (!code) {
      alert("‚ùå Vui l√≤ng nh·∫≠p m√£ s·∫£n ph·∫©m c·∫ßn th√™m.");
      return;
    }

    const isDuplicate = this.formData.products.some((p: any) => p.product_code === code);
    if (isDuplicate) {
      alert("‚ö†Ô∏è M√£ s·∫£n ph·∫©m ƒë√£ t·ªìn t·∫°i trong danh s√°ch.");
      return;
    }

    this.http.get<any>(`http://localhost:3000/api/products-detail/by-code/${code}`).subscribe({
      next: (product) => {
        if (!product || !product.product_code) {
          alert("‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m c√≥ m√£: " + code);
          return;
        }

        const newSupplier = product.supplier_name?.trim() || '';
        const currentSupplier = this.formData.supplier_name?.trim() || '';

        if (this.formData.products.length > 0 && currentSupplier && newSupplier && newSupplier !== currentSupplier) {
          alert(`‚ùå Nh√† cung c·∫•p c·ªßa s·∫£n ph·∫©m (${newSupplier}) kh√¥ng kh·ªõp v·ªõi phi·∫øu hi·ªán t·∫°i (${currentSupplier}).`);
          return;
        }

        const newItem = {
          product_code: product.product_code,
          product_name: product.product_name,
          product_type: product.product_type,
          unit: product.unit,
          manufacture_date: product.manufacture_date?.substring(0, 10) || '',
          expiry_date: product.expiry_date?.substring(0, 10) || '',
          quantity: 0,
          unit_price: product.unit_price || 0,
          kg_per_unit: product.weight_per_unit || 0,
          weight: 0,
          area: 0,
          imageFile: null,
          preview: product.image_url || '',
          image_url: product.image_url || '',
          readonly: true,
          supplier_name: product.supplier_name || '',
          logo_url: product.logo_url || '',
          location: product.location || ''
        };

        this.formData.products.push(newItem);

        // Populate supplier info if not set
        if (!currentSupplier && newSupplier) {
          this.formData.supplier_name = newSupplier;
          this.formData.logoPreview = product.logo_url || '';
          this.formData.supplier_address = product.supplier_address || '';
          this.formData.representative_name = product.representative_name || '';
          this.formData.representative_email = product.representative_email || '';
          this.formData.representative_phone = product.representative_phone || '';
        }

        this.onFieldChange();
        this.maSanPhamCanThem = '';
      },
      error: (err) => {
        console.error(err);
        alert("‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ho·∫∑c x·∫£y ra l·ªói khi truy v·∫•n.");
      }
    });
  }


  resetForm() {
    if (confirm('‚ö†Ô∏è B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën t·∫°o l·∫°i? To√†n b·ªô d·ªØ li·ªáu s·∫Ω b·ªã m·∫•t.')) {
      // X√≥a d·ªØ li·ªáu form
      this.formData = {
        created_date: this.today,
        supplier_name: '',
        supplier_address: '',
        logo: null,
        logoPreview: '',
        representative_name: '',
        representative_email: '',
        representative_phone: '',
        appointment_date: '',
        note: '',
        products: []
      };

      this.generatedReceiptCode = '';
      this.maSanPhamCanThem = '';

      // T·∫°o 1 khung nh·∫≠p m·ªõi m·∫∑c ƒë·ªãnh
      this.addProduct();

      // X√≥a d·ªØ li·ªáu l∆∞u t·∫°m (localStorage n·∫øu c√≥)
      this.guiHangService.clearFormData();
      this.guiHangService.clearProducts();
    }
  }


  // Khi ng∆∞·ªùi d√πng nh·∫≠p t·ªïng kh·ªëi l∆∞·ª£ng (weight), t√≠nh ng∆∞·ª£c l·∫°i kg/sp
  updateKgPerUnit(index: number): void {
    const item = this.formData.products[index];
    const quantity = Number(item.quantity) || 0;
    const weight = Number(item.weight) || 0;

    if (quantity > 0) {
      item.kg_per_unit = +(weight / quantity).toFixed(2);
      item.area = +(weight / 500 * 5).toFixed(2); // M·ªõi: 500kg = 5m¬≤
    }
  }


}

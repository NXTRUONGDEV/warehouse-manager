import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { HttpClient } from '@angular/common/http';
import { FormsModule } from '@angular/forms';
import { FilterProductCodePipe } from './filter-product-code.pipe'; // ƒê∆∞·ªùng d·∫´n ƒë√∫ng nh√©


@Component({
  selector: 'app-duyetphieunhap',
  standalone: true,
  imports: [CommonModule, FormsModule,  FilterProductCodePipe],
  templateUrl: './duyetphieunhap.component.html',
  styleUrls: ['./duyetphieunhap.component.css']
})
export class DuyetphieunhapComponent implements OnInit {
  danhSachPhieu: any[] = [];
  selectedPhieu: any = null;
  popupNhapKhoMo: boolean = false;
  danhSachSanPhamNhap: any[] = [];
  filterCode: string = '';
  danhSachKhuVuc: any[] = [];
  danhSachMaTrung: string[] | null = null; // null: ch∆∞a ki·ªÉm tra, []: kh√¥ng tr√πng, ['A1']...
  

  //b·ªô l·ªçc
  filter = {
  keyword: '',
  ngayBatDau: '',
  ngayKetThuc: '',
  trangThai: ''
  };

  danhSachPhieuGoc: any[] = []; // d·ªØ li·ªáu g·ªëc t·ª´ API

  maCanKiemTra: string = '';
  ketQuaSanPham: any = null;

  // L·∫•y th√¥ng tin ng∆∞·ªùi duy·ªát (admin hi·ªán t·∫°i)
  adminName = sessionStorage.getItem('name') || '';
  adminEmail = sessionStorage.getItem('email') || '';

  // Ph·∫£n h·ªìi h·ªá th·ªëng nh·∫≠p v√†o
  phanHoiHeThong: string = '';

  popupChonViTriMo: boolean = false;
  sanPhamDangChon: any = null;
  danhSachPallet: any[] = [];
  palletGridPopup: any[][] = [];

  phanBoCanConLai = 0;
  palletsDaChon: any[] = [];

  chonSoLuongPopupMo: boolean = false;
  palletDangNhapSoLuong: any = null;
  soLuongMuonThem: number = 0;

  goiYSoLuongToiDa: number = 0;


  constructor(private http: HttpClient) {}

  ngOnInit(): void {
    this.loadPhieu();
  }

  loadPhieu() {
    this.http.get<any[]>('http://localhost:3000/api/phieu-nhap').subscribe(data => {
      this.danhSachPhieuGoc = data;
      this.locPhieu(); // G·ªçi h√†m l·ªçc ngay sau khi load
    });
  }

  locPhieu() {
    const { keyword, ngayBatDau, ngayKetThuc, trangThai } = this.filter;

    this.danhSachPhieu = this.danhSachPhieuGoc.filter(p => {
      const matchKeyword =
        !keyword ||
        p.receipt_code.toLowerCase().includes(keyword.toLowerCase()) ||
        p.supplier_name.toLowerCase().includes(keyword.toLowerCase());

      const matchNgayBatDau = !ngayBatDau || new Date(p.created_date) >= new Date(ngayBatDau);
      const matchNgayKetThuc = !ngayKetThuc || new Date(p.created_date) <= new Date(ngayKetThuc);

      const matchTrangThai = !trangThai || p.trang_thai === trangThai;

      return matchKeyword && matchNgayBatDau && matchNgayKetThuc && matchTrangThai;
    });
  }


  kiemTraTrongKho() {
    this.danhSachMaTrung = null; // ‚ùå X√≥a k·∫øt qu·∫£ ki·ªÉm tra nh·∫≠p kho n·∫øu c√≥
    if (!this.maCanKiemTra) {
      this.ketQuaSanPham = null;
      return;
    }

    this.http.get<any>(`http://localhost:3000/api/products-detail/check-ma/${this.maCanKiemTra}`)
      .subscribe(res => {
        if (res.exists) {
          this.ketQuaSanPham = res.product;
        } else {
          this.ketQuaSanPham = { product_code: null }; // ‚úÖ Gi·ªØ ƒë·ªãnh d·∫°ng ƒë·ªÉ hi·ªán th√¥ng b√°o "ch∆∞a t·ªìn t·∫°i"
        }
      }, err => {
        console.error('L·ªói ki·ªÉm tra s·∫£n ph·∫©m:', err);
        this.ketQuaSanPham = { product_code: null };
      });
  }

  capNhatThanhTien(sp: any) {
    const unitPrice = Number(sp.unit_price) || 0;
    const quantity = Number(sp.quantity ?? 1); // n·∫øu undefined th√¨ m·∫∑c ƒë·ªãnh l√† 1
    sp.total_price = unitPrice * quantity;
    this.capNhatTongTien();
  }

  capNhatTongTien() {
    let total = 0;
    for (let sp of this.danhSachSanPhamNhap) {
      total += sp.total_price || 0;
    }
    if (this.selectedPhieu) {
      this.selectedPhieu.total_amount = total;
    }
  }

  xemChiTiet(phieu: any) {
    this.selectedPhieu = phieu;
    this.phanHoiHeThong = phieu.note_admin || ''; // L·∫•y ph·∫£n h·ªìi h·ªá th·ªëng n·∫øu c√≥
  }

  dongChiTiet() {
    this.selectedPhieu = null;
    this.phanHoiHeThong = '';
  }

  hoanTatKiemTra() {
    const newStatus = 'ƒê√£ duy·ªát';

    this.http.put(`http://localhost:3000/api/phieu-nhap/${this.selectedPhieu.id}/admin-cap-nhat`, {
      trang_thai: newStatus,
      note_admin: this.phanHoiHeThong,
      admin_account_email: this.adminEmail,
      admin_account_name: this.adminName
    }).subscribe(() => {
      alert('‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng!');
      // C·∫≠p nh·∫≠t l·∫°i tr√™n UI
      this.selectedPhieu.trang_thai = newStatus;
      this.selectedPhieu.note_admin = this.phanHoiHeThong;
      this.selectedPhieu.admin_account_email = this.adminEmail;
      this.selectedPhieu.admin_account_name = this.adminName;
    });
    console.log({
      id: this.selectedPhieu.id,
      trang_thai: newStatus,
      note_admin: this.phanHoiHeThong,
      admin_account_email: this.adminEmail,
      admin_account_name: this.adminName
    });
    window.location.reload();

  }

  // G·ªçi API ƒë·ªÉ m·ªü popup x√°c nh·∫≠n
  moPopupNhapKho() {
    console.log('üì¢ ƒê√£ g·ªçi m·ªü popup');
    this.popupNhapKhoMo = true;

    // L·∫•y danh s√°ch s·∫£n ph·∫©m c·ªßa phi·∫øu nh·∫≠p
    this.http.get<any[]>(`http://localhost:3000/api/phieu-nhap/${this.selectedPhieu.id}/san-pham`)
      .subscribe(data => {
        this.danhSachSanPhamNhap = data.map(sp => ({
          ...sp,
          old_product_code: sp.product_code, // üëà l∆∞u m√£ c≈©
          trung_ma: false,
          // ƒê·ªãnh d·∫°ng l·∫°i ng√†y ƒë·ªÉ ph√π h·ª£p v·ªõi input type="date"
          manufacture_date: sp.manufacture_date ? sp.manufacture_date.slice(0, 10) : '',
          expiry_date: sp.expiry_date ? sp.expiry_date.slice(0, 10) : ''
        }));
      }, err => {
        console.error('‚ùå L·ªói khi l·∫•y s·∫£n ph·∫©m phi·∫øu:', err);
      });

    // L·∫•y danh s√°ch khu v·ª±c kho
    this.http.get<any[]>('http://localhost:3000/api/khu-vuc')
      .subscribe(data => {
        this.danhSachKhuVuc = data;
      }, err => {
        console.error('‚ùå L·ªói khi l·∫•y khu v·ª±c:', err);
      });
  }

  // ƒê√≥ng popup
  dongPopup() {
    this.popupNhapKhoMo = false;
    this.danhSachSanPhamNhap = [];
  }

  kiemTraTrungMa(sp: any) {
    if (!sp.product_code) {
      sp.trung_ma = false;
      return;
    }

    this.http.get<any>(`http://localhost:3000/api/products-detail/check-ma/${sp.product_code}`)
      .subscribe(data => {
        sp.trung_ma = data.exists; // ‚úÖ G√°n ch√≠nh x√°c
      }, error => {
        sp.trung_ma = false;
      });
  }

  // X√°c nh·∫≠n nh·∫≠p kho ch√≠nh th·ª©c
  xacNhanNhapKhoChinhThuc() {
    this.ketQuaSanPham = null;

    const maSanPham = this.danhSachSanPhamNhap.map(sp => sp.product_code);

    this.http.post<any>('http://localhost:3000/api/products-detail/check-multiple', {
      ma_san_pham: maSanPham
    }).subscribe(result => {
      const maTrung = [...new Set(result.duplicates as string[] || [])];
      this.danhSachMaTrung = maTrung;

      // üîç Ch·ªâ ki·ªÉm tra l·ªói n·∫øu m√£ tr√πng v√† kh√¥ng b·∫≠t c·∫≠p nh·∫≠t th√™m
      const loiTrung: string[] = [];
      for (const sp of this.danhSachSanPhamNhap) {
        if (maTrung.includes(sp.product_code) && !sp.cap_nhat_them) {
          loiTrung.push(sp.product_code);
        }
      }

      if (loiTrung.length > 0) {
        alert(`‚ùå Kh√¥ng th·ªÉ nh·∫≠p kho! C√°c m√£ sau b·ªã tr√πng nh∆∞ng ch∆∞a b·∫≠t "C·∫≠p nh·∫≠t th√™m": ${loiTrung.join(', ')}`);
        return;
      }

      // ‚úÖ Ti·∫øp t·ª•c n·∫øu m·ªçi th·ª© ok
      const danhSachOK: any[] = [];

      for (let sp of this.danhSachSanPhamNhap) {
        if (
          !sp.product_code || !sp.product_name || !sp.product_type || !sp.unit ||
          !sp.unit_price || !sp.quantity || !sp.khu_vuc_id || !sp.location
        ) {
          alert(`‚ö†Ô∏è S·∫£n ph·∫©m "${sp.product_name || sp.product_code}" thi·∫øu th√¥ng tin b·∫Øt bu·ªôc (m√£, t√™n, lo·∫°i, ƒë∆°n v·ªã, gi√°, s·ªë l∆∞·ª£ng, khu v·ª±c ho·∫∑c v·ªã tr√≠)!`);
          return;
        }

        const base = {
          product_code: sp.product_code,
          product_name: sp.product_name,
          product_type: sp.product_type,
          image_url: sp.image_url,
          unit: sp.unit,
          quantity: sp.quantity,
          unit_price: sp.unit_price,
          total_price: sp.total_price,
          manufacture_date: sp.manufacture_date,
          expiry_date: sp.expiry_date,
          supplier_name: this.selectedPhieu.supplier_name,
          logo_url: this.selectedPhieu.logo_url,
          old_product_code: sp.old_product_code || sp.product_code,
          receipt_code: this.selectedPhieu.receipt_code,
          cap_nhat_them: sp.cap_nhat_them === true // ‚úÖ Truy·ªÅn xu·ªëng server
        };

        const pallets = sp.ds_pallet || [];
        const soPallet = pallets.length || 1;
        const weightPer = sp.weight / soPallet;
        const areaPer = sp.area / soPallet;

        if (soPallet > 0) {
          for (const p of pallets) {
            danhSachOK.push({
              ...base,
              location: p.name,
              khu_vuc_id: sp.khu_vuc_id,
              weight: p.added_weight || weightPer,
              quantity: p.added_quantity || sp.quantity,
              area: p.added_area || areaPer
            });
          }
        } else {
          danhSachOK.push({
            ...base,
            location: sp.location,
            khu_vuc_id: sp.khu_vuc_id,
            weight: sp.weight,
            area: sp.area
          });
        }
      }

      // üì® G·ª≠i API nh·∫≠p kho
      this.http.post('http://localhost:3000/api/nhap-kho', {
        phieu_id: this.selectedPhieu.id,
        danh_sach_san_pham: danhSachOK
      }).subscribe(() => {
        this.http.put(`http://localhost:3000/api/phieu-nhap/${this.selectedPhieu.id}/hoan-tat`, {
          trang_thai: 'ƒê√£ nh·∫≠p h√†ng v√†o kho'
        }).subscribe(() => {
          alert('üì¶ Nh·∫≠p kho th√†nh c√¥ng!');
          this.popupNhapKhoMo = false;
          this.loadPhieu();
          this.selectedPhieu = null;
          this.danhSachMaTrung = null;
        });
      }, err => {
        alert('‚ùå L·ªói khi l∆∞u h√†ng!');
        console.error(err);
      });
    }, err => {
      alert('‚ùå L·ªói khi ki·ªÉm tra m√£ tr√πng!');
      console.error(err);
    });
  }


  
  // Ch·ªçn khu v·ª±c kho
  onFileSelected(event: any, sp: any) {
    const file = event.target.files[0];
    if (file) {
      const formData = new FormData();
      formData.append('image', file);

      this.http.post<any>('http://localhost:3000/api/upload', formData).subscribe(res => {
        sp.image_url = res.imageUrl; // L∆∞u ƒë∆∞·ªùng d·∫´n ·∫£nh m·ªõi
      });
    }
  }

/* M·ªõi  */
  moPopupChonViTri(sp: any) {
    if (!sp.khu_vuc_id) {
      alert('‚ö†Ô∏è Vui l√≤ng ch·ªçn khu v·ª±c tr∆∞·ªõc khi ph√¢n b·ªï v·ªã tr√≠ pallet!');
      return;
    }

    this.sanPhamDangChon = sp;
    this.phanBoCanConLai = sp.weight; // ho·∫∑c t√≠nh to√°n theo nhu c·∫ßu
    this.palletsDaChon = [];

    this.layPalletTheoKhu(sp.khu_vuc_id);  // ‚úÖ Ch·ªâ g·ªçi khi ch·∫Øc ch·∫Øn c√≥ khu_vuc_id
    this.popupChonViTriMo = true;
  }

  layPalletTheoKhu(khuVucId: number) {
    this.http.get<any[]>(`http://localhost:3000/api/kho/area/${khuVucId}`).subscribe({
      next: data => {
        // Reset tr∆∞·ªõc
        this.danhSachPallet = data;

        // üîÅ Duy·ªát t·∫•t c·∫£ s·∫£n ph·∫©m nh·∫≠p
        for (const sp of this.danhSachSanPhamNhap) {
          if (sp.ds_pallet && sp.khu_vuc_id === khuVucId) {
            for (const p of sp.ds_pallet) {
              const pallet = data.find(x => x.name === p.name);
              if (pallet) {
                pallet.weightUsed += p.added_weight; // ‚úÖ c·ªông th√™m
              }
            }
          }
        }

        // Chia l·∫°i th√†nh 10x10
        this.palletGridPopup = [];
        for (let i = 0; i < 100; i += 10) {
          this.palletGridPopup.push(data.slice(i, i + 10));
        }
      },
      error: err => console.error('‚ùå L·ªói khi l·∫•y pallet:', err)
    });
  }

  chonPallet(pallet: any) {
    if (!this.sanPhamDangChon.ds_pallet) {
      this.sanPhamDangChon.ds_pallet = [];
    }

    const daChon = this.sanPhamDangChon.ds_pallet.find((p: any) => p.name === pallet.name);

    if (daChon) {
      // B·ªè ch·ªçn pallet
      pallet.weightUsed -= daChon.added_weight;
      this.sanPhamDangChon.ds_pallet = this.sanPhamDangChon.ds_pallet.filter((p: any) => p.name !== pallet.name);
      return;
    }

    // üëâ T√≠nh kh·ªëi l∆∞·ª£ng c√≤n l·∫°i c·ªßa pallet
    const weightPerUnit = this.sanPhamDangChon.weight / this.sanPhamDangChon.quantity;
    const palletTrongKg = 500 - (pallet.weightUsed || 0);
    const maxQuantityTheoKg = Math.floor(palletTrongKg / weightPerUnit);

    // üëâ T√≠nh s·ªë l∆∞·ª£ng c√≤n l·∫°i ch∆∞a ph√¢n b·ªï c·ªßa s·∫£n ph·∫©m
    const daThem = this.getSoLuongDaThem();
    const soLuongConLai = this.sanPhamDangChon.quantity - daThem;

    // üëâ Khuy·∫øn ngh·ªã l√† s·ªë l∆∞·ª£ng nh·ªè nh·∫•t gi·ªØa c√≤n l·∫°i v√† theo kh·ªëi l∆∞·ª£ng
    const maxKhuyenNghi = Math.min(soLuongConLai, maxQuantityTheoKg);

    // üëâ M·ªü mini popup nh·∫≠p s·ªë l∆∞·ª£ng
    this.palletDangNhapSoLuong = pallet;
    this.goiYSoLuongToiDa = maxKhuyenNghi;
    this.soLuongMuonThem = maxKhuyenNghi;
    this.chonSoLuongPopupMo = true;
  }


  xacNhanThemSoLuongVaoPallet() {
    const pallet = this.palletDangNhapSoLuong;
    const quantityThem = this.soLuongMuonThem;

    if (!quantityThem || quantityThem <= 0) {
      alert('‚ö†Ô∏è S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá!');
      return;
    }

    const quantityDaPhan = this.sanPhamDangChon.ds_pallet.reduce(
      (sum: number, p: any) => sum + p.added_quantity,
      0
    );
    const quantityConLai = this.sanPhamDangChon.quantity - quantityDaPhan;

    if (quantityThem > quantityConLai) {
      alert(`‚ö†Ô∏è V∆∞·ª£t qu√° s·ªë l∆∞·ª£ng c√≤n l·∫°i (${quantityConLai})!`);
      return;
    }

    const weightPerUnit = this.sanPhamDangChon.weight / this.sanPhamDangChon.quantity;
    const weightThem = quantityThem * weightPerUnit;
    const palletTrongKg = 500 - pallet.weightUsed;

    if (weightThem > palletTrongKg) {
      alert(`‚ö†Ô∏è Pallet kh√¥ng ƒë·ªß s·ª©c ch·ª©a! Ch·ªâ c√≤n ${palletTrongKg.toFixed(2)}kg`);
      return;
    }

    this.sanPhamDangChon.ds_pallet.push({
      name: pallet.name,
      added_quantity: quantityThem,
      added_weight: weightThem
    });

    pallet.weightUsed += weightThem;
    this.chonSoLuongPopupMo = false;
  }

  xacNhanViTriHang() {
    const daChon: { name: string; added_weight: number; added_quantity: number }[] = this.sanPhamDangChon.ds_pallet || [];

    const tongKL = daChon.reduce((sum: number, p: { added_weight: number }) => sum + p.added_weight, 0);
    const tongSL = daChon.reduce((sum: number, p: { added_quantity: number }) => sum + p.added_quantity, 0);

    const requiredKL = this.sanPhamDangChon.weight;
    const requiredSL = this.sanPhamDangChon.quantity;
    const epsilon = 0.01;

    if (Math.abs(tongKL - requiredKL) > epsilon || tongSL !== requiredSL) {
      alert(`‚ùå Thi·∫øu th√¥ng tin:
  - Kh·ªëi l∆∞·ª£ng ƒë√£ ph√¢n: ${tongKL.toFixed(2)} / ${requiredKL} kg
  - S·ªë l∆∞·ª£ng ƒë√£ ph√¢n: ${tongSL} / ${requiredSL} th√πng`);
      return;
    }

    this.sanPhamDangChon.location = daChon.map((p: { name: string }) => p.name).join(', ');
    alert('‚úÖ ƒê√£ x√°c nh·∫≠n v·ªã tr√≠ ƒë·ªÉ h√†ng!');
    this.popupChonViTriMo = false;
  }

  laPalletDangChon(pallet: { name: string }): boolean {
    if (!this.sanPhamDangChon?.ds_pallet) return false;
    return this.sanPhamDangChon.ds_pallet.some((p: { name: string }) => p.name === pallet.name);
  }

  getSoLuongDaThem(): number {
    if (!this.sanPhamDangChon?.ds_pallet) return 0;
    return this.sanPhamDangChon.ds_pallet.reduce(
      (sum: number, p: any) => sum + p.added_quantity, 0
    );
  }

  getKhoiLuongDaThem(): number {
    if (!this.sanPhamDangChon?.ds_pallet) return 0;
    return this.sanPhamDangChon.ds_pallet.reduce(
      (sum: number, p: any) => sum + p.added_weight, 0
    );
  }

  huyPhieu(p: any) {
    if (p.trang_thai === 'ƒê√£ g·ª≠i phi·∫øu') {
      // g·ªçi API c·∫≠p nh·∫≠t tr·∫°ng th√°i phi·∫øu sang 'ƒê√£ h·ªßy'
      this.http.put(`http://localhost:3000/api/phieu-nhap-kho/${p.id}/huy`, { trang_thai: 'ƒê√£ h·ªßy' }).subscribe({
        next: (res) => {
          // c·∫≠p nh·∫≠t tr·∫°ng th√°i ·ªü frontend ƒë·ªÉ n√∫t thay ƒë·ªïi ngay
          p.trang_thai = 'ƒê√£ h·ªßy';
        },
        error: (err) => {
          alert('H·ªßy phi·∫øu th·∫•t b·∫°i, vui l√≤ng th·ª≠ l·∫°i');
        }
      });
    }
  }

  tuDongThemHetVaoPallet() {
    if (!this.sanPhamDangChon || !this.danhSachPallet.length) {
      alert("‚ö†Ô∏è Ch∆∞a ch·ªçn s·∫£n ph·∫©m ho·∫∑c ch∆∞a t·∫£i pallet!");
      return;
    }

    // N·∫øu ch∆∞a c√≥ m·∫£ng pallet ƒë√£ ch·ªçn th√¨ t·∫°o m·ªõi
    if (!this.sanPhamDangChon.ds_pallet) {
      this.sanPhamDangChon.ds_pallet = [];
    }

    let soLuongConLai = this.sanPhamDangChon.quantity - this.getSoLuongDaThem();
    const weightPerUnit = this.sanPhamDangChon.weight / this.sanPhamDangChon.quantity;

    for (const pallet of this.danhSachPallet) {
      if (soLuongConLai <= 0) break; // H·∫øt h√†ng ƒë·ªÉ ph√¢n

      const palletTrongKg = 500 - (pallet.weightUsed || 0);
      const maxQuantityTheoKg = Math.floor(palletTrongKg / weightPerUnit);
      const soLuongThem = Math.min(soLuongConLai, maxQuantityTheoKg);

      if (soLuongThem > 0) {
        const weightThem = soLuongThem * weightPerUnit;

        // Th√™m v√†o ds_pallet c·ªßa s·∫£n ph·∫©m
        this.sanPhamDangChon.ds_pallet.push({
          name: pallet.name,
          added_quantity: soLuongThem,
          added_weight: weightThem
        });

        // C·∫≠p nh·∫≠t pallet ƒë√£ d√πng
        pallet.weightUsed += weightThem;

        soLuongConLai -= soLuongThem;
      }
    }

    if (soLuongConLai > 0) {
      alert(`‚ö†Ô∏è C√≤n ${soLuongConLai} s·∫£n ph·∫©m ch∆∞a ph√¢n b·ªï do pallet ƒë·∫ßy!`);
    } else {
      alert("‚úÖ ƒê√£ t·ª± ƒë·ªông ph√¢n b·ªï h·∫øt v√†o pallet!");
    }
  }

  thuHoiTatCaPallet() {
    if (!this.sanPhamDangChon || !this.sanPhamDangChon.ds_pallet) {
      alert("‚ö†Ô∏è Ch∆∞a c√≥ pallet n√†o ƒë·ªÉ thu h·ªìi!");
      return;
    }

    for (const p of this.sanPhamDangChon.ds_pallet) {
      const pallet = this.danhSachPallet.find(x => x.name === p.name);
      if (pallet) {
        pallet.weightUsed -= p.added_weight;
        if (pallet.weightUsed < 0) pallet.weightUsed = 0; // tr√°nh √¢m
      }
    }

    // X√≥a danh s√°ch pallet ƒë√£ ph√¢n b·ªï cho s·∫£n ph·∫©m
    this.sanPhamDangChon.ds_pallet = [];

    alert("‚ôª ƒê√£ thu h·ªìi to√†n b·ªô pallet v·ª´a ph√¢n b·ªï!");
  }

}

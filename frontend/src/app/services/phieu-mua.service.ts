import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';

// C√°c kh√≥a c∆° b·∫£n (ch∆∞a g·∫Øn userId)
const STORAGE_FORM_KEY = 'phieuMuaForm';
const STORAGE_PRODUCTS_KEY = 'phieuMuaProducts';

@Injectable({
  providedIn: 'root'
})
export class PhieuMuaService {
  // === Qu·∫£n l√Ω danh s√°ch s·∫£n ph·∫©m qua BehaviorSubject ===
  private productList = new BehaviorSubject<any[]>(this.getProductsFromStorage());
  products$ = this.productList.asObservable();

  constructor() {}

  // =============================
  // üß© H·ªñ TR·ª¢: L·∫•y key theo userId
  // =============================
  private getStorageKey(baseKey: string): string {
    const userId = sessionStorage.getItem('id') || 'default';
    return `${baseKey}_${userId}`;
  }

  // =============================
  // üü© QU·∫¢N L√ù FORM DATA CHUNG
  // =============================

  // üü¢ L·∫•y to√†n b·ªô formData t·ª´ localStorage theo userId
  getFormData(): any {
    const saved = localStorage.getItem(this.getStorageKey(STORAGE_FORM_KEY));
    return saved ? JSON.parse(saved) : null;
  }

  // üü¢ L∆∞u formData theo userId
  saveFormData(formData: any): void {
    localStorage.setItem(this.getStorageKey(STORAGE_FORM_KEY), JSON.stringify(formData));
  }

  // üü¢ Xo√° formData theo userId
  clearFormData(): void {
    localStorage.removeItem(this.getStorageKey(STORAGE_FORM_KEY));
  }

  // =============================
  // üü¶ QU·∫¢N L√ù DANH S√ÅCH S·∫¢N PH·∫®M
  // =============================

  // üîµ L·∫•y danh s√°ch s·∫£n ph·∫©m theo userId
  private getProductsFromStorage(): any[] {
    const saved = localStorage.getItem(this.getStorageKey(STORAGE_PRODUCTS_KEY));
    return saved ? JSON.parse(saved) : [];
  }

  // üîµ L∆∞u danh s√°ch s·∫£n ph·∫©m theo userId
  private saveProductsToStorage(data: any[]): void {
    localStorage.setItem(this.getStorageKey(STORAGE_PRODUCTS_KEY), JSON.stringify(data));
  }

  // üîµ L·∫•y danh s√°ch hi·ªán t·∫°i
  getProducts(): any[] {
    return this.productList.getValue();
  }

  // üîµ Th√™m s·∫£n ph·∫©m m·ªõi n·∫øu ch∆∞a t·ªìn t·∫°i trong danh s√°ch
  addProduct(product: any): boolean {
    const current = this.getProducts();
    const isExisted = current.some(p => p.product_code === product.product_code);
    if (isExisted) return false;

    const newList = [...current, product];
    this.saveProductsToStorage(newList);
    this.productList.next(newList);
    return true;
  }

  // üîµ Xo√° to√†n b·ªô danh s√°ch s·∫£n ph·∫©m c·ªßa user
  clearProducts(): void {
    localStorage.removeItem(this.getStorageKey(STORAGE_PRODUCTS_KEY));
    this.productList.next([]);
  }

  // üîµ C·∫≠p nh·∫≠t l·∫°i danh s√°ch s·∫£n ph·∫©m sau ch·ªânh s·ª≠a
  setProducts(data: any[]): void {
    this.saveProductsToStorage(data);
    this.productList.next(data);
  }
}
